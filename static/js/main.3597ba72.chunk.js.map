{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/AlertComp.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","href","title","type","id","style","color","onClick","toggleMode","htmlFor","defaultProps","aboutText","TextForm","useState","text","setText","rows","value","onChange","event","target","console","log","toUpperCase","toLowerCase","split","length","About","backgroundColor","myStyle","setStyle","border","AlertComp","role","App","setTitle","mode","setMode","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3597ba72.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\n                        </li>\n                        {/* <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n                        </li> */}\n                    </ul>\n                    {/* <form className=\"d-flex\">\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n                    </form> */}\n                    <div className=\"form-check form-switch\" style={{color: 'white'}}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Show Hide Alert</label>\n                    </div>\n                </div>\n            </div>\n\n        </nav>\n    );\n}\n\nNavbar.propTypes = {\n    aboutText: PropTypes.string\n}\n\nNavbar.defaultProps = {\n    aboutText: \"About us\"\n}\n\nexport default Navbar;","import { useState } from \"react\";\nimport React from 'react';\n\nfunction TextForm(props) {\n\n    const [text, setText] = useState('Enter text');\n\n    const handleUppercase = ()=> {\n        console.log('handleUppercase clicked');\n        setText(text.toUpperCase());\n    }\n\n    const handleLowercase = ()=> {\n        console.log('handleLowerase clicked');\n        setText(text.toLowerCase());\n    }\n\n    const clearText = ()=> {\n        console.log('clearText clicked');\n        setText('');\n    }\n\n    const handleChange = (event) => {\n        setText(event.target.value);\n    }\n\n    return (\n        <div className='container'>\n            <h1>{props.title}</h1>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleChange}></textarea>\n                <div className=\"container my-3\">\n                <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={handleUppercase}>Convert to Upper Case</button>\n                <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={handleLowercase}>Convert to Lower Case</button>\n                <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={clearText}>Clear Text</button>\n                </div>\n                \n            </div>\n            <div>\n                <h1>Text summary</h1>\n                <p>{text.split(\" \").length} worder & {text.length} characters</p>\n            </div>\n        </div>\n    );\n}\n\nexport default TextForm;","import React, { useState } from 'react';\n\nfunction About(props) {\n\n    const [myStyle, setStyle] = useState({\n        color: 'black',\n        backgroundColor: 'white'\n    })\n\n    const toggleMode = () => {\n        console.log('toggle mode clicked');\n        if (myStyle.color === 'black') {\n            setStyle({\n                color: 'white',\n                backgroundColor: 'black',\n                border: '1px solid white'\n            })\n        } else {\n            setStyle({\n                color: 'black',\n                backgroundColor: 'white',\n            })\n        }\n    }\n\n    return (\n        <div className=\"container\" style={myStyle}>\n            <h1>About Us</h1>\n            <div className=\"accordion\" id=\"accordionExample\">\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingOne\" >\n                        <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                            Accordion Item #1\n                        </button>\n                    </h2>\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\"  aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle}>\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                            Accordion Item #2\n                        </button>\n                    </h2>\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle}>\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n                            Accordion Item #3\n                        </button>\n                    </h2>\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle}>\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={toggleMode}>Primary</button>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default About;","import React from 'react';\n\nfunction AlertComp(props) {\n    return (\n        props.title && <div className=\"alert alert-success\" role=\"alert\">\n            {props.title}\n        </div>\n    );\n}\n\nexport default AlertComp;","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport AlertComp from './components/AlertComp';\nimport { useState } from 'react';\n\nimport React from \"react\";\n\nfunction App() {\n\n  const [title, setTitle] = useState(null);\n  const [mode, setMode] = useState('light');\n\n\n  const toggleModeFunction = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743'\n      setTitle(\"Alert has been shown\");\n      // setTimeout(()=>{\n      //   setTitle(null);\n      // }, 2000);\n    } else {\n      document.body.style.backgroundColor = 'white'\n      setMode('light');\n      setTitle(null);\n\n    }\n  };\n\n\n\n\n  return (\n    <>\n      <Navbar title=\"TextUtils\" toggleMode={toggleModeFunction} />\n      <AlertComp title={title} />\n        <TextForm title=\"Enter your text here\" />\n        <About />  \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}